apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "datatorch.fullname" . }}-api
  labels:
    app: {{ include "datatorch.name" . }}-api
    {{- include "datatorch.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.api.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "datatorch.name" . }}-api
      {{- include "datatorch.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ include "datatorch.name" . }}-api
        {{- include "datatorch.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: regcred
      containers:
        - name: datatorch-api
          image: gcr.io/datatorch/graphql:{{ .Values.api.tag }}
          env:
            - name: LOGGER_LEVEL
              value: {{ .Values.backend.logging }}
            - name: SECRET
              value: {{ .Values.secret | quote }}
            - name: LICENSE_EMAIL
              valueFrom:
                secretKeyRef:
                  name: {{ include "datatorch.fullname" . }}-license
                  key: licenseEmail
            - name: LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "datatorch.fullname" . }}-license
                  key: licenseKey
            - name: FRONTEND_FQDN
              value: {{ .Values.webclientFQDN | quote }}
            - name: API_FQDN
              value: {{ .Values.apiFQDN | quote }}
            - name: JWT_HTTP_ONLY
              value: "false"
            - name: JWT_SAME_SITE
              value: "strict"
            - name: DISABLE_LOCAL_STORAGE
              value: "true"
              # Database configuration
            - name: DATABASE_HOST
              value: {{ .Values.backend.database.host | default (printf "%s-postgresql" .Release.Name) | quote}}
            - name: DATABASE_NAME
              value: {{ .Values.backend.database.name | default .Values.postgresql.postgresqlDatabase | quote }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "datatorch.fullname" . }}-postgres
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "datatorch.fullname" . }}-postgres
                  key: password
            - name: DATASET_PORT
              value: {{ .Values.backend.database.port | default .Values.postgresql.service.port | quote }}
              # Redis configuration
            - name: REDIS_HOST
              value: {{ .Values.backend.redis.host | default (printf "%s-redis-master" .Release.Name) | quote}}
            - name: REDIS_PORT
              value: {{ .Values.backend.redis.port | default .Values.redis.redisPort | quote}}
            - name: REDIS_PASSWORD
              value: {{ .Values.backend.redis.password  | default .Values.redis.password | quote }}
          ports:
            - containerPort: 4000
          # livenessProbe:
          #   httpGet:
          #     path: /graphql
          #     port: 4000
          #   initialDelaySeconds: 60
          #   periodSeconds: 10
        {{- if .Values.backend.extraContainers }}
        {{- toYaml .Values.backend.extraContainers | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.backend.extraVolumes }}
        {{- toYaml .Values.backend.extraVolumes | nindent 8 }}
        {{- end }}

      